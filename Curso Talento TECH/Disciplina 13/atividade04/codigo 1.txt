import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Criando um dataset fictício
data = {
    "combustivel": ["Gasolina", "Diesel", "Etanol", "Gasolina", "Diesel", "Etanol", "Gasolina", "Diesel"],
    "idade": [3, 5, 2, 7, 4, 6, 1, 8],  # Idade do veículo em anos
    "quilometragem": [50000, 70000, 20000, 90000, 40000, 80000, 15000, 100000],  # Em km
    "preco": [45000, 40000, 55000, 30000, 42000, 32000, 58000, 28000]  # Preço do carro
}

df = pd.DataFrame(data)

# Separando recursos (X) e variável alvo (y)
X = df.drop(columns=["preco"])
y = df["preco"]

# Identificando colunas categóricas e numéricas
cat_features = ["combustivel"]
num_features = ["idade", "quilometragem"]

# Criando transformadores
cat_transformer = OneHotEncoder()
num_transformer = StandardScaler()

# Aplicando transformações
preprocessor = ColumnTransformer([
    ("cat", cat_transformer, cat_features),
    ("num", num_transformer, num_features)
])

# Criando o pipeline
pipeline = Pipeline([
    ("preprocessador", preprocessor),
    ("modelo", LinearRegression())
])

# Dividindo os dados
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinando o modelo
pipeline.fit(X_train, y_train)

# Fazendo previsões
y_pred = pipeline.predict(X_test)

# Avaliação do modelo
mse = mean_squared_error(y_test, y_pred)
print(f"Erro Quadrático Médio (MSE): {mse:.2f}")