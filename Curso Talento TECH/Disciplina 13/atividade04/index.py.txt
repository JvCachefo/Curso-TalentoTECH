## Unidade 4 - Atividades de Aprendizado de Máquina

### 1) Pipeline para Previsão de Preço de Automóveis

```python
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Criando dados fictícios
dados = {
    'Combustível': ['Gasolina', 'Diesel', 'Etanol', 'Gasolina', 'Diesel', 'Etanol', 'Gasolina'],
    'Idade': [3, 5, 2, 10, 8, 1, 4],
    'Quilometragem': [40000, 80000, 20000, 150000, 120000, 10000, 50000],
    'Preço': [30000, 25000, 35000, 12000, 18000, 40000, 28000]
}

df = pd.DataFrame(dados)

# Separando variáveis independentes e dependentes
X = df[['Combustível', 'Idade', 'Quilometragem']]
y = df['Preço']

# Dividindo em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Definindo transformações
colunas_categoricas = ['Combustível']
colunas_numericas = ['Idade', 'Quilometragem']

transformador = ColumnTransformer([
    ('cat', OneHotEncoder(), colunas_categoricas),
    ('num', StandardScaler(), colunas_numericas)
])

# Criando o pipeline
modelo = Pipeline([
    ('preprocessamento', transformador),
    ('regressor', LinearRegression())
])

# Treinando o modelo
modelo.fit(X_train, y_train)

# Fazendo previsões
y_pred = modelo.predict(X_test)

# Calculando o erro quadrático médio (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'Erro Quadrático Médio: {mse:.2f}')
```

---

### 2) Previsão de Preços de Criptomoedas

```python
import requests
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# Coletando dados históricos do CoinGecko API
url = "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart"
params = {"vs_currency": "usd", "days": "30", "interval": "daily"}
response = requests.get(url, params=params)
data = response.json()

# Processando dados
precos = [item[1] for item in data['prices']]
df = pd.DataFrame({'Preço': precos})

df['Variação'] = df['Preço'].diff()
df['Sinal'] = (df['Variação'] > 0).astype(int)
df.dropna(inplace=True)

# Definição de features e rótulos
X = df[['Variação']]
y = df['Sinal']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criando o modelo
modelo = RandomForestClassifier(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)

# Avaliando a acurácia
acuracia = accuracy_score(y_test, y_pred)
print(f'Acurácia do modelo: {acuracia:.2f}')

# Visualizando a importância das variáveis
importancias = modelo.feature_importances_
sns.barplot(x=['Variação'], y=importancias)
plt.xlabel('Variável')
plt.ylabel('Importância')
plt.title('Importância das Variáveis no Modelo')
plt.show()
```